name: Deploy WinAI to VM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
        
    - name: Add VM to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VM
      env:
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
        LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        ssh $VM_USER@$VM_HOST << EOF
          # Stop existing containers if they exist
          if [ -d "/opt/winai" ]; then
            cd /opt/winai
            sudo docker-compose down || true
          fi
          
          # Clean up and recreate app directory (need sudo for /opt)
          sudo rm -rf /opt/winai
          sudo mkdir -p /opt/winai
          cd /opt/winai
          
          # Clone latest code with PAT token (with sudo for /opt directory)
          sudo git clone https://\${PAT_TOKEN}@github.com/${{ github.repository }}.git .
          
          # Verify files were cloned
          echo "=== Verifying cloned files ==="
          ls -la
          echo "=== Checking docker-compose.yml ==="
          if [ -f "docker-compose.yml" ]; then
            echo "✅ docker-compose.yml found"
          else
            echo "❌ docker-compose.yml NOT found"
            exit 1
          fi
          
          # Update email in docker-compose.yml (more robust replacement)
          sudo sed -i "s|--email your-email@example.com|--email \$LETSENCRYPT_EMAIL|g" docker-compose.yml
          
          # Verify the replacement worked
          if grep -q "your-email@example.com" docker-compose.yml; then
            echo "Trying alternative email replacement method..."
            sudo sed -i "s|your-email@example.com|\$LETSENCRYPT_EMAIL|g" docker-compose.yml
          fi
          
          # Create SSL directory
          sudo mkdir -p ssl
          
          # Start services with HTTP-only configuration first
          sudo cp nginx-initial.conf nginx-current.conf
          sudo sed -i 's|./nginx.conf:/etc/nginx/nginx.conf:ro|./nginx-current.conf:/etc/nginx/nginx.conf:ro|g' docker-compose.yml
          sudo docker-compose up -d
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if we need to get SSL certificate
          if [ ! -f "ssl/live/winai.hiretechteam.ai/fullchain.pem" ]; then
            echo "Getting SSL certificate..."
            if sudo docker-compose run --rm certbot; then
              echo "SSL certificate obtained, switching to HTTPS..."
              sudo cp nginx.conf nginx-current.conf
              sudo docker-compose restart nginx
            else
              echo "SSL certificate generation failed, continuing with HTTP"
            fi
          else
            echo "SSL certificate exists, switching to HTTPS configuration..."
            sudo cp nginx.conf nginx-current.conf
            sudo docker-compose restart nginx
          fi
          
          # Show status
          sudo docker-compose ps
          
          echo "Deployment completed successfully!"
        EOF
        
    - name: Verify deployment
      env:
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
      run: |
        ssh $VM_USER@$VM_HOST << 'EOF'
          cd /opt/winai
          echo "=== Service Status ==="
          sudo docker-compose ps
          
          echo "=== Checking health endpoint ==="
          curl -f http://localhost/health || echo "Health check failed (normal if SSL cert is required)"
          
          echo "=== Recent logs ==="
          sudo docker-compose logs --tail=10
        EOF
